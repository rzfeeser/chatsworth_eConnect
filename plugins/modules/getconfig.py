#!/usr/bin/python

# Copyright: (c) 2018, Terry Jones <terry.jones@example.org>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
import requests # our module requires requests to be installed
from urllib3.exceptions import InsecureRequestWarning


from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

DOCUMENTATION = r'''
---
module: getconfig

short_description: 

version_added: "1.0.0"

description: This module retrieves the configuration of the targeted PDU. As with all Chatsworth modules, the login module will need to be run prior to this module to generate the sessionid token (note: generally, only one token needs to be generated for the entire playbook).


options:
    ip:
        description: This is the IP of the device we want to connect to.
        required: true
        type: str
    sessionid:
        description: This is the sessionid token generated by the login module.
        required: true
        type: str

# Specify this value according to your collection
# in format of namespace.collection.doc_fragment_name
extends_documentation_fragment:
    - my_namespace.my_collection.my_doc_fragment_name

author:
    - Zach Feeser (@rzfeeser)
    - Dan 

'''

EXAMPLES = r'''
# Grab a sessionid token and then config
- name: Get the sessionid token
  rzfeeser.chatsworth_eConnect.login:
    username: admin
    password: larry123
    ip: 192.168.8.2
  register: results

- name: Use sessionid token to get config
  rzfeeser.chatsworth_eConnect.getconfig:
    sessionid: "{{ results.sessionid }}"
    ip: 192.168.8.2
  register: config_results

- name: display the retrieved config
  debug:
    var: config_results
'''

RETURN = r'''
# These are examples of possible return values, and in general should use other names for return values.
sessionid:
    description: The sessionid used to perform the lookup
    type: str
    returned: always
    sample: 24601
config:
    description: The running config returned by the API
    type: list
    returned: always
    sample: [{"pduname": "PDU Name", "pdudescription": "PDU Description", ..., ..., "pducabinet‚Äù: "Cabinet"}]
http_resp_code:
    description: A 200 indicates success. This value is the actual HTTP response code that the JSON is attached to. The primary use for this value would be for debugging (a 200 represents success by HTTP, where other codes may indicate client, network, or server side issues).
    type: int
    returned: always
    sample: 200
'''

from ansible.module_utils.basic import AnsibleModule


def run_module():
    # define available arguments/parameters a user can pass to the module
    module_args = dict(
        sessionid=dict(type='str', required=True),
        ip=dict(type='str', required=True)
    )

    # seed the result dict in the object
    # we primarily care about changed and state
    # changed is if this module effectively modified the target
    # state will include any data that you want your module to pass back
    # for consumption, for example, in a subsequent task
    result = dict(
        changed=False,
        config=[],
        http_resp_code=0,
        sessionid=''
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    # if the user is working with this module in only check mode we do not
    # want to make any changes to the environment, just return the current
    # state with no modifications
    if module.check_mode:
        module.exit_json(**result)

    # manipulate or modify the state as needed (this is going to be the
    # part where your module will do what it needs to do)


    ## create our url
    url = f"https://{{ module.params['ip'] }}"

    res = requests.get(url + '/bulk/config', headers={'SessionID': module.params['sessionid']})

    param = res.json()  # Converts response to JSON file.

    # seed the values into our result to send back to our user
    result['sessionid'] = module.params('sessionid')  # Finds value of session ID key in param file.
    result['http_resp_code'] = res.status_code
    config = res.json() # I assume this is a list that is returned
    result['config'] = config

    # AnsibleModule.fail_json() to pass in the message and the result
    if result['http_resp_code'] != 200:
        module.fail_json(msg='Chatsworth eConnect Power PDU returned a non-200 HTTP message! (This is bad)', **result)

    # in the event of a successful module execution, you will want to
    # simple AnsibleModule.exit_json(), passing the key/value results
    module.exit_json(**result)


def main():
    run_module()


if __name__ == '__main__':
    main()
